/** 11042015 12:39PM On RR Stage and RR Dev and RR LIVE**/
ALTER TABLE `rapidregistry`.`documentfolders` 
ADD COLUMN `readOnly` BIT(1) NULL DEFAULT b'0' AFTER `dateCreated`;


/** 10312015 09:46PM On RR Stage and RR Dev and RR LIVE**/

use rapidregistry;

drop table if exists rel_stdreportentities;
drop table if exists  program_reports;
drop table if exists cannedreports;
drop table if exists reportstdrequests;


USE `rapidregistry`;


DROP TABLE IF EXISTS `reportDetails`;
CREATE TABLE `reportDetails` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `programId` int(11) NOT NULL,
  `reportTypeId` int(11) NOT NULL,
  `reportName` varchar(45) DEFAULT NULL,
  `reportDesc` text,
  `reportFile` varchar(45) DEFAULT NULL,
  `status` bit(1) NOT NULL DEFAULT b'1',
  `surveyId` int(11) DEFAULT NULL,
  `surveyDateQuestionId` int(11) DEFAULT NULL,
  `groupByQuestionId` int(11) DEFAULT NULL,
  `orderByQuestionId` int(11) DEFAULT NULL,
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `reportDetails` VALUES (1,6,1,'Resources Leveraged/Grant Proposals',NULL,'','',36,0,NULL,NULL,'2015-10-29 12:19:43'),(2,6,1,'Resources/Tools Used',NULL,'','',37,0,NULL,NULL,'2015-10-29 12:19:43'),(3,6,1,'Meetings',NULL,'','',38,0,NULL,NULL,'2015-10-29 12:19:43'),(4,6,1,'Media/Promotions',NULL,'','',39,0,NULL,NULL,'2015-10-29 12:19:43'),(5,6,1,'Events/Programs',NULL,'','',40,0,NULL,NULL,'2015-10-29 12:19:43'),(6,6,1,'Successes / Challenges / Other Info',NULL,'','',41,0,NULL,NULL,'2015-10-29 12:19:43'),(7,6,1,'Practice, Policy,  Environmental Change',NULL,'','',42,0,NULL,NULL,'2015-10-29 12:19:43'),(8,6,2,'Resources Leveraged/Grant Proposals',NULL,'','',36,0,NULL,NULL,'2015-10-29 12:19:50'),(9,6,2,'Resources/Tools Used',NULL,'','',37,0,NULL,NULL,'2015-10-29 12:19:50'),(10,6,2,'Meetings',NULL,'','',38,0,NULL,NULL,'2015-10-29 12:19:50'),(11,6,2,'Media/Promotions',NULL,'','',39,0,NULL,NULL,'2015-10-29 12:19:50'),(12,6,2,'Events/Programs',NULL,'','',40,0,NULL,NULL,'2015-10-29 12:19:50'),(13,6,2,'Successes / Challenges / Other Info',NULL,'','',41,0,NULL,NULL,'2015-10-29 12:19:50'),(14,6,2,'Practice, Policy,  Environmental Change',NULL,'','',42,0,NULL,NULL,'2015-10-29 12:19:50');


DROP TABLE IF EXISTS `lu_reportStatuses`;
CREATE TABLE `lu_reportStatuses` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `statusForAdmin` varchar(45) DEFAULT NULL,
  `statusDisplay` varchar(45) NOT NULL,
  `statusDesc` text,
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `lu_reportStatuses` VALUES (1,'Requested','Requested',NULL,'2015-10-30 22:42:52'),(2,'Processing','Requested',NULL,'2015-10-30 22:42:52'),(3,'Ready for Viewing','Ready for Viewing',NULL,'2015-10-30 22:42:52'),(4,'Viewed','Viewed',NULL,'2015-10-30 22:42:52'),(5,'Errored','Requested',NULL,'2015-10-30 23:04:52'),(6,'Deleted','Deleted',NULL,'2015-10-31 00:31:39');

DROP TABLE IF EXISTS `lu_reportTypes`;
CREATE TABLE `lu_reportTypes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `reportType` varchar(45) DEFAULT NULL,
  `dateCreated` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `lu_reportTypes` VALUES (1,'Detail','2015-10-28 16:46:23'),(2,'Summary Count','2015-10-28 16:46:23');


DROP TABLE IF EXISTS `reportRequests`;
CREATE TABLE `reportRequests` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `programId` int(11) NOT NULL,
  `systemUserId` int(11) NOT NULL,
  `startDate` datetime NOT NULL,
  `endDate` datetime NOT NULL,
  `startProcessTime` datetime DEFAULT NULL,
  `endProcessTime` datetime DEFAULT NULL,
  `statusId` int(11) NOT NULL DEFAULT '1',
  `notifcationSent` bit(1) DEFAULT b'0',
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `fk_status_idx` (`statusId`),
  KEY `fk_user_idx` (`systemUserId`),
  CONSTRAINT `fk_status` FOREIGN KEY (`statusId`) REFERENCES `lu_reportStatuses` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_user` FOREIGN KEY (`systemUserId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `reportQuestions`;
CREATE TABLE `reportQuestions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `surveyQuestionId` int(11) NOT NULL,
  `reportId` int(11) NOT NULL,
  `questionDisplay` text,
  `showInReport` bit(1) NOT NULL DEFAULT b'1',
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `reportRequestContentCriteria`;
CREATE TABLE `reportRequestContentCriteria` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `codeId` int(11) NOT NULL,
  `reportRequestId` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_rrId_idx` (`reportRequestId`),
  KEY `fk_rrccCodeId_idx` (`codeId`),
  CONSTRAINT `fk_rrId` FOREIGN KEY (`reportRequestId`) REFERENCES `reportRequests` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_rrccCodeId` FOREIGN KEY (`codeId`) REFERENCES `lu_activitycodes` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `reportRequestDisplay`;
CREATE TABLE `reportRequestDisplay` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `reportRequestId` int(11) NOT NULL,
  `dateSubmitted` datetime NOT NULL,
  `ReportType` varchar(255) DEFAULT NULL,
  `ReportNames` varchar(1000) DEFAULT NULL,
  `Entity3Names` varchar(1000) DEFAULT NULL,
  `statusId` int(11) NOT NULL,
  `statusDisplay` varchar(45) DEFAULT NULL,
  `systemUserId` int(11) NOT NULL,
  `firstName` varchar(100) DEFAULT NULL,
  `lastName` varchar(100) DEFAULT NULL,
  `datesRequested` varchar(50) NOT NULL,
  `programId` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_systemUserId_idx` (`systemUserId`),
  KEY `fk_statusId_idx` (`statusId`),
  KEY `fk_progId_idx` (`programId`),
  KEY `fk_reqRepId_idx` (`reportRequestId`),
  CONSTRAINT `fk_reqRepId` FOREIGN KEY (`reportRequestId`) REFERENCES `reportRequests` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_progId` FOREIGN KEY (`programId`) REFERENCES `programs` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_statusId` FOREIGN KEY (`statusId`) REFERENCES `lu_reportStatuses` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_systemUserId` FOREIGN KEY (`systemUserId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `reportRequestEntities`;
CREATE TABLE `reportRequestEntities` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `reportRequestId` int(11) NOT NULL,
  `entity3Id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_rre_rrId_idx` (`reportRequestId`),
  KEY `fk_rre_entityId_idx` (`entity3Id`),
  CONSTRAINT `fk_rre_entityId` FOREIGN KEY (`entity3Id`) REFERENCES `programorghierarchy_details` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_rre_rrId` FOREIGN KEY (`reportRequestId`) REFERENCES `reportRequests` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `reportRequestReports`;
CREATE TABLE `reportRequestReports` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `reportRequestId` int(11) DEFAULT NULL,
  `reportId` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_rrr_rrId_idx` (`reportRequestId`),
  KEY `fk_rrr_repId_idx` (`reportId`),
  CONSTRAINT `fk_rrr_rrId` FOREIGN KEY (`reportRequestId`) REFERENCES `reportRequestReports` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_rrr_repId` FOREIGN KEY (`reportId`) REFERENCES `reportDetails` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;




DELIMITER ;;
CREATE DEFINER=`root`@`localhost` trigger insertRepDisplay after insert on reportRequests
for each row
begin
  insert into reportRequestDisplay (reportRequestId, DateRequested, statusId, systemUserId, programId, datesRequested)
  values (new.id, new.datecreated, new.statusId, 
  new.systemUserId, new.programId, concat(date(new.startdate), ' - ', date(new.enddate)));
  
  UPDATE reportRequestDisplay INNER JOIN users ON reportRequestDisplay.systemUserId = users.id
	SET reportRequestDisplay.firstName = users.firstName, reportRequestDisplay.lastName = users.lastname
	WHERE reportRequestDisplay.reportRequestId = new.id;
    
   update  reportRequestDisplay INNER JOIN lu_reportStatuses
   on reportRequestDisplay.statusId =  lu_reportStatuses.id
   set reportRequestDisplay.statusDisplay = lu_reportStatuses.statusDisplay
   WHERE reportRequestDisplay.reportRequestId = new.id;
   
end ;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` trigger udpateRepDisplayStatus after update on reportRequests
for each row
begin
  update requestReportDisplay set statusId = new.statusId
  where reportRequestId = new.id;
  
  UPDATE requestReportDisplay
	INNER JOIN lu_reportstatuses ON requestReportDisplay.statusId = lu_reportstatuses.id
	SET requestReportDisplay.statusDisplay = lu_reportstatuses.statusDisplay
	WHERE requestReportDisplay.reportRequestId = new.id;

end ;;
DELIMITER ;


DROP TABLE IF EXISTS `reportViews`;
CREATE TABLE `reportViews` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `systemUserId` int(11) NOT NULL,
  `reportId` int(11) NOT NULL,
  `dateCreated` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `fk_viewUserId_idx` (`systemUserId`),
  KEY `fk_reportId_idx` (`reportId`),
  CONSTRAINT `fk_viewUserId` FOREIGN KEY (`systemUserId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_reportId` FOREIGN KEY (`reportId`) REFERENCES `reportDetails` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


DELIMITER ;;
CREATE DEFINER=`root`@`localhost` trigger updateReportDisplayUserName after update on users
for each row
begin
  update reportRequestDisplay set firstName = new.firstName, lastName = new.LastName 
  where systemUserId = new.id;
end;;
DELIMITER ;


/** grace 11022015 **/
use rapidRegistry;

drop table if exists tempAnswerTextUpdate;

CREATE TABLE `tempAnswerTextUpdate` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `answerText` VARCHAR(45) NULL,
  `originalAnswer` VARCHAR(45) NULL, 
  `string1` VARCHAR(45) NULL,
  `string2` VARCHAR(45) NULL,
  `surveyAnswerId` INT NULL,
  PRIMARY KEY (`id`));


drop PROCEDURE if exists  changeDate_mdyyToyyyymmdd;

DELIMITER ;;

CREATE DEFINER=`root`@`localhost` PROCEDURE `changeDate_mdyyToyyyymmdd`(in thisYear int)
proc_main:begin

/**this SP will update date fields in format of m/d/yy to 19/20xx mysql date
sample usage - call changeDate_mdyyToyyyymmdd (15);
**/

update tempAnswerTextUpdate 
set answertext = concat(case when (left(answertext,2)) like '%/%' then concat('0', answertext) else answertext end)
 where length(answerText) > 0;

-- now we update the date
update tempAnswerTextUpdate
set answertext =
 case when substring(answertext,4,2) like '%/%' then 
concat(left(answertext,3), '0', substring(answertext,4,1) , right(answertext,3)) 
else 
concat(left(answertext,3),  substring(answertext,4,2) , right(answertext,3)) end where length(answerText) > 0;

-- update year 
update tempAnswerTextUpdate
set answertext =
case when (cast(right(answertext, 2) as decimal) between 0 and thisYear)  then 
concat(left(answerText,6), '20',  right(answertext,2)) else
concat(left(answerText,6), '19',  right(answertext,2)) end where length(answerText) > 0;

-- now reformat
update tempAnswerTextUpdate 
set answertext = concat(right(answertext,4) , '-', left(answertext, 2), '-', substring(answertext, 4,2))
 where length(answerText) > 0;
     
select '';
 
end proc_main;;
DELIMITER ;

-- this part updates current answerText
delete from tempAnswerTextUpdate;

insert into tempAnswerTextUpdate (answerText, surveyAnswerId)
select answerText, id
from submittedsurveyanswers where questionid in 
(select id from survey_questions where answerTypeId = 6)
and answerText not like '%^^^^%'
and length(answerText) > 0
and ROUND (   
        (
            LENGTH(answertext)
            - LENGTH( REPLACE ( answertext, "/", "") ) 
        ) / LENGTH("/")        
    ) = 2 ;

call changeDate_mdyyToyyyymmdd (15);


update submittedsurveyanswers join tempAnswerTextUpdate on 
tempAnswerTextUpdate.surveyAnswerId = submittedsurveyanswers.id
set submittedsurveyanswers.answerText = tempAnswerTextUpdate.answerText;
  
/** this updates the multivalues **/
  
delete from tempAnswerTextUpdate;

insert into tempAnswerTextUpdate (answerText, surveyAnswerId, originalanswer)
select answerText, id, answerText
from submittedsurveyanswers where questionid in 
(select id from survey_questions where answerTypeId = 6)
and answerText like '%^^^^%'
and length(answerText) > 0;

update tempAnswerTextUpdate  set string1 =  substring_index(answerText, '^^^^^', 1), 
string2 = replace(substring(substring_index(answertext, '^^^^^', 2), length(substring_index(answertext, '^^^^^', 2 - 1)) + 1), '^^^^^', '')
;


update tempAnswerTextUpdate set answerText = string1;
call changeDate_mdyyToyyyymmdd (15);
update tempAnswerTextUpdate set string1 = answertext;


update tempAnswerTextUpdate set answerText = string2;


call changeDate_mdyyToyyyymmdd (15);

update tempAnswerTextUpdate set  string2 = answertext;
update tempAnswerTextUpdate set answertext = concat(string1, '^^^^^', string2);

update submittedsurveyanswers join tempAnswerTextUpdate on 
tempAnswerTextUpdate.surveyAnswerId = submittedsurveyanswers.id
set submittedsurveyanswers.answerText = tempAnswerTextUpdate.answerText;

drop PROCEDURE if exists  updateRepDisplayTable;
DELIMITER ;;

CREATE DEFINER=`root`@`localhost` PROCEDURE `updateRepDisplayTable`(in repReqId int)
proc_main:begin

/**this SP will update reportRequestDisplay with long names of entities and reports so that we will have all request
info on hand
**/
-- this updates the report names

	BEGIN
		set @stmt = concat(
        " UPDATE reportRequestDisplay JOIN (select ",repReqId ," matchid, ",
        " group_concat(distinct reportname ORDER BY reportname asc SEPARATOR '<br/>') as label ",
        " from reportDetails where reportdetails.id in (select reportId from reportrequestreports",
        " where reportrequestid = ", repReqId , ")) tbl_concat",
		" ON reportRequestDisplay.reportRequestId = tbl_concat.matchid",
		" SET reportRequestDisplay.reportnames = tbl_concat.label ",
        " WHERE reportRequestDisplay.reportRequestId = ", repReqId, ";");

	END;


PREPARE stmt from @stmt;
EXECUTE stmt;-- execute

-- this updates the report type display

	BEGIN
		set @stmt = concat(
        " UPDATE reportRequestDisplay JOIN (select ",repReqId," matchid, ",
		 " group_concat(distinct reportType ORDER BY reportType asc SEPARATOR ', ') as label 
			from lu_reportTypes where id in (select distinct reportTypeId from reportDetails where
            id in (select reportid  from reportrequestreports
            where reportrequestid = ", repReqId, "))) tbl_concat",
		" ON reportRequestDisplay.reportRequestId = tbl_concat.matchid",
		" SET reportRequestDisplay.reportType = tbl_concat.label ",
        " WHERE reportRequestDisplay.reportRequestId = ", repReqId, ";");

	END;

PREPARE stmt from @stmt;
EXECUTE stmt;-- execute

-- now update entity names

BEGIN
		set @stmt = concat(
        " UPDATE reportRequestDisplay JOIN (select ",repReqId," matchid, ",
		" group_concat(distinct name  ORDER BY name asc SEPARATOR '<br/>') as label ",
		" from programorghierarchy_details where id in (select distinct entity3id ",
        " from reportRequestEntities where reportrequestid = ",repReqId,")) tbl_concat",
		" ON reportRequestDisplay.reportRequestId = tbl_concat.matchid",
		" SET reportRequestDisplay.entity3names = tbl_concat.label ",
        " WHERE reportRequestDisplay.reportRequestId = ", repReqId, ";");

	END;

PREPARE stmt from @stmt;
EXECUTE stmt;-- execute

-- the only error for this is if SP bombs, no need to write in insert error logs
select * from reportRequestDisplay where reportRequestId = repReqId;
end proc_main;;

DELIMITER ;;
  
  
/** 11/05/2015 grace not on any BOWLINK servers**/
  

drop PROCEDURE if exists  insertReportRequestEntities;
DELIMITER ;;

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertReportRequestEntities`(in entity3IdsIn varchar(800), in reportRequsestIdIn int)
proc_main:begin

-- this SP splits the entity3Ids and inserts them into reportRequestEntities
-- SAMPLE USAGE - call insertReportRequestEntities ('74,75,76',  7);

SET @codeIds = entity3IdsIn;
SET @rrId = reportRequsestIdIn;

SET @values = REPLACE(@codeIds, ',', CONCAT(', ', @rrId, '),('));
SET @values = CONCAT('(', @values, ', ', @rrId, ')'); -- This produces a string like this -> (1, 100),(2, 100),(3, 100)

SET @insert = CONCAT('INSERT INTO reportRequestEntities (entity3Id, reportRequestId) VALUES', @values); -- Build INSERT statement like this -> INSERT INTO RolesMenus VALUES(1, 100),(2, 100),(3, 100)


-- Execute INSERT statement
PREPARE stmt FROM @insert;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
-- the only error for this is if SP bombs, no need to write in insert error logs
select '';

end proc_main;;

DELIMITER ;

  
drop PROCEDURE if exists  insertReportRequestContentCriteria;
DELIMITER ;;

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertReportRequestContentCriteria`(in codeIdsIn varchar(800), in reportRequsestIdIn int)
proc_main:begin

-- this SP splits the codeIds and inserts them into insertReportRequestContentCriteria
-- SAMPLE USAGE - call reportRequestContentCriteria ('74,75,76',  7);

SET @codeIds = codeIdsIn;
SET @rrId = reportRequsestIdIn;

SET @values = REPLACE(@codeIds, ',', CONCAT(', ', @rrId, '),('));
SET @values = CONCAT('(', @values, ', ', @rrId, ')'); -- This produces a string like this -> (1, 100),(2, 100),(3, 100)

SET @insert = CONCAT('INSERT INTO reportRequestContentCriteria (codeId, reportRequestId) VALUES', @values); -- Build INSERT statement like this -> INSERT INTO RolesMenus VALUES(1, 100),(2, 100),(3, 100)


-- Execute INSERT statement
PREPARE stmt FROM @insert;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
-- the only error for this is if SP bombs, no need to write in insert error logs
select '';

end proc_main;;

DELIMITER ;



drop PROCEDURE if exists  insertReportRequestReports;
DELIMITER ;;

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertReportRequestReports`(in reportIdsIn varchar(800), in reportRequsestIdIn int)
proc_main:begin

-- this SP splits the codeIds and inserts them into reportRequestReports
-- SAMPLE USAGE - call insertReportRequestReports ('74,75,76',  7);

SET @codeIds = reportIdsIn;
SET @rrId = reportRequsestIdIn;

SET @values = REPLACE(@codeIds, ',', CONCAT(', ', @rrId, '),('));
SET @values = CONCAT('(', @values, ', ', @rrId, ')'); -- This produces a string like this -> (1, 100),(2, 100),(3, 100)

SET @insert = CONCAT('INSERT INTO reportRequestReports (reportId, reportRequestId) VALUES', @values); -- Build INSERT statement like this -> INSERT INTO RolesMenus VALUES(1, 100),(2, 100),(3, 100)


-- Execute INSERT statement
PREPARE stmt FROM @insert;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
-- the only error for this is if SP bombs, no need to write in insert error logs
select '';

end proc_main;;

DELIMITER ;



USE `rapidregistry`;

DELIMITER $$

DROP TRIGGER IF EXISTS insertRepDisplay$$

CREATE DEFINER=`root`@`localhost` trigger insertRepDisplay after insert on reportRequests
for each row
begin
  insert into reportRequestDisplay (reportRequestId, dateSubmitted, statusId, systemUserId, 
  programId, datesRequested)
  values (new.id, new.datecreated, new.statusId, 
  new.systemUserId, new.programId, concat(left(new.startdate, 10), ' - ', left(new.enddate,10)));
  
  UPDATE reportRequestDisplay INNER JOIN users ON reportRequestDisplay.systemUserId = users.id
	SET reportRequestDisplay.firstName = users.firstName, reportRequestDisplay.lastName = users.lastname
	WHERE reportRequestDisplay.reportRequestId = new.id;
    
   update  reportRequestDisplay INNER JOIN lu_reportStatuses
   on reportRequestDisplay.statusId =  lu_reportStatuses.id
   set reportRequestDisplay.statusDisplay = lu_reportStatuses.statusDisplay
   WHERE reportRequestDisplay.reportRequestId = new.id;
   
   
end$$
DELIMITER ;

